import type { Request, Response } from 'express';
import { appErrorResponseHandler } from '@app/handlers/response/error.handler';
import { customLog } from '@app/utils/util.util';
import {
  generateDailySalesReport,
  generateHistoricalProductionReport,
  generateWeeklyProductionReport
} from '@services/report.service';

class ReportController {
  public async generateDailySales(req: Request, res: Response): Promise<any> {
    try {
      const { from, to, format } = req.body;

      if (!from || !to || !format) {
        return res.status(400).json({ message: 'Debe proporcionar los campos "from", "to" y "format".' });
      }

      await generateDailySalesReport(
        { from: new Date(from), to: new Date(to) },
        format,
        res
      );

      return; // La respuesta se manda directamente dentro de generateDailySalesReport
    } catch (error) {
      const { statusCode, error: err } = appErrorResponseHandler(error);
      return res.status(statusCode).json(err);
    }
  }

  public async getWeeklyProductionReport(req: Request, res: Response): Promise<any> {
    try {
      const user = res.locals.user;
      const { shedId } = req.params;
      await generateWeeklyProductionReport(shedId, res);
      customLog(`Report generated by ${user.email} for shed ${shedId}`);
      return; // Ya mandamos el archivo al navegador directamente
    } catch (error) {
      customLog('Error generating weekly report', error);
      return res.status(500).json({ message: 'Error generating weekly report', error: (error as Error).message });
    }
  };

  public async getHistoricalProductionReport(req: Request, res: Response): Promise<any> {
    try {
      const user = res.locals.user;
      const { shedId } = req.params;
      await generateHistoricalProductionReport(shedId, res);
      customLog(`Historical report generated by ${user.email} for shed ${shedId}`);
      return; // La respuesta ya fue enviada
    } catch (error) {
      customLog('Error generating historical report', error);
      return res.status(500).json({ message: 'Error generating historical report', error: (error as Error).message });
    }
  };
}

export const reportController = new ReportController();
